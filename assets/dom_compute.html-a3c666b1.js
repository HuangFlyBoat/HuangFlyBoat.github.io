import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as i,c as l,a as e,b as n,d as t,e as a}from"./app-5282eda6.js";const d="/assets/images/CrushingZone/element-box-diagram.png",c="/assets/images/CrushingZone/window.png",p={},h=a('<p>在这里分类总结一些常用的计算元素几何位置的属性和方法，包括了HTMLElement 、Intersection Observer、window、scroll</p><h1 id="dom-几何位置相关计算属性和方法" tabindex="-1"><a class="header-anchor" href="#dom-几何位置相关计算属性和方法" aria-hidden="true">#</a> DOM 几何位置相关计算属性和方法</h1><h2 id="一、htmlelement-相关" tabindex="-1"><a class="header-anchor" href="#一、htmlelement-相关" aria-hidden="true">#</a> 一、HTMLElement 相关</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意：如果元素被隐藏（例如 元素或者元素的祖先之一的元素的 style.display 被设置为 none），则返回 0</p></div><h3 id="_1-1-元素自身宽高" tabindex="-1"><a class="header-anchor" href="#_1-1-元素自身宽高" aria-hidden="true">#</a> 1.1 元素自身宽高</h3><ol><li><p><strong>HTMLElement.offsetHeight</strong>，元素自身可视高度加上上下 border 的高度</p></li><li><p><strong>HTMLElement.offsetWidth</strong>，元素自身可视宽度加上左右 border 的宽度</p></li></ol><h3 id="_1-2-元素相对位置" tabindex="-1"><a class="header-anchor" href="#_1-2-元素相对位置" aria-hidden="true">#</a> 1.2 元素相对位置</h3><ol><li><p><strong>HTMLElement.offsetLeft</strong>，元素自己 border 左边距离父元素 border 左边或者 body 元素 border 左边的距离</p></li><li><p><strong>HTMLElement.offsetTop</strong>，元素自己 border 顶部距离父元素顶部或者 body 元素 border 顶部的距离</p></li><li><p><strong>getBoundingClientRect()</strong>，方法返回一个 DOMRect 对象，提供有关元素大小及其相对于视口的位置。</p></li></ol><figure><img src="'+d+`" alt="DOMRect 对象提供的相对视口位置" tabindex="0" loading="lazy"><figcaption>DOMRect 对象提供的相对视口位置</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> rect <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> top <span class="token operator">=</span> rect<span class="token punctuation">.</span>top<span class="token punctuation">;</span>
<span class="token keyword">const</span> bottom <span class="token operator">=</span> rect<span class="token punctuation">.</span>bottom<span class="token punctuation">;</span>
<span class="token keyword">const</span> height <span class="token operator">=</span> rect<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>补充：<strong>HTMLElement.offsetParent</strong>，获取元素的父元素，如果没有就是 body 元素</p>`,11),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement",target:"_blank",rel:"noopener noreferrer"},u=a('<blockquote><p>Viewport 视口表示当前正在查看的计算机图形中的多边形（通常为矩形）区域。在 Web 浏览器术语中，它是指您正在查看的文档部分，该部分当前在其窗口中可见（如果文档以全屏模式查看，则为屏幕）。视口外的内容在滚动到视图中之前不会在屏幕上显示。 视区中当前可见的部分称为可视视区。这可以小于布局视口，例如当用户进行捏合缩放时。布局视口保持不变，但可视视口变小。</p></blockquote><h2 id="二、window-相关" tabindex="-1"><a class="header-anchor" href="#二、window-相关" aria-hidden="true">#</a> 二、Window 相关</h2><h3 id="窗口大小" tabindex="-1"><a class="header-anchor" href="#窗口大小" aria-hidden="true">#</a> 窗口大小</h3><figure><img src="'+c+'" alt="示例图" tabindex="0" loading="lazy"><figcaption>示例图</figcaption></figure><ol><li><p><strong>Window.outerHeight</strong>，返回整个浏览器窗口的高度（以像素为单位），包括侧边栏（如果存在）、窗口镶边（window chrome）和窗口调正边框（window resizing border/handle）。</p></li><li><p><strong>Window.outerWidth</strong>，获取浏览器窗口外部的宽度。表示整个浏览器窗口的宽度，包括侧边栏（如果存在）、窗口镶边（window chrome）和调正窗口大小的边框（window resizing borders/handles）。</p></li><li><p><strong>Window.innerHeight</strong>，浏览器窗口的 <strong>视口（viewport）</strong> 高度（以像素为单位）；如果有水平滚动条，也包括滚动条高度。</p></li><li><p><strong>Window.innerWidth</strong>，返回以像素为单位的窗口的内部宽度。如果垂直滚动条存在，则这个属性将包括它的宽度。</p></li></ol><h2 id="三、scroll-相关计算" tabindex="-1"><a class="header-anchor" href="#三、scroll-相关计算" aria-hidden="true">#</a> 三、Scroll 相关计算</h2><h3 id="_3-1-相对窗口的滚动计算" tabindex="-1"><a class="header-anchor" href="#_3-1-相对窗口的滚动计算" aria-hidden="true">#</a> 3.1 相对窗口的滚动计算</h3><ol><li><p><strong>Window.scrollX</strong>,返回文档/页面水平方向滚动的像素值。</p></li><li><p><strong>Window.scrollY</strong>,返回文档在垂直方向已滚动的像素值。</p></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意还有个别名，Window.pageXOffset 和 Window.pageYOffset</p></div><h3 id="_3-2-相对某个元素的滚动计算" tabindex="-1"><a class="header-anchor" href="#_3-2-相对某个元素的滚动计算" aria-hidden="true">#</a> 3.2 相对某个元素的滚动计算</h3><p>一个页面里面可以会有多个滚动条，多出现在某个元素属性设置了 固定高度 和 <code>overflow:auto</code> 等属性</p><ol><li><p><strong>Element.scrollTop</strong>,获取或设置元素内容垂直滚动的像素数</p></li><li><p><strong>Element.scrollWidth</strong> 只读属性,测量元素内容的宽度，包括由于溢出屏幕部分。</p></li></ol><h2 id="四、intersection-observer-api" tabindex="-1"><a class="header-anchor" href="#四、intersection-observer-api" aria-hidden="true">#</a> 四、Intersection Observer Api</h2><p>以往实现通常是监听滚动事件和<code>getBoundingClientRect()</code>方法来实现的，当页面滚动时，计算函数会被频繁调用，会影响网站的性能。 需要尽可能减少不必要的计算和操作。可以考虑使用节流函数来限制函数的调用频率。</p>',14),m={href:"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API",target:"_blank",rel:"noopener noreferrer"},b=e("p",null,"一种新的浏览器API，它可以异步观察目标元素与其祖先元素或顶级文档视窗之间的交叉状态。使用该API可以轻松实现懒加载图片，只需要监听目标元素与视窗的交叉状态即可。",-1),_=e("h2",{id:"五、应用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#五、应用","aria-hidden":"true"},"#"),n(" 五、应用")],-1),f=e("h3",{id:"_5-1-图片懒加载",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-1-图片懒加载","aria-hidden":"true"},"#"),n(" 5.1 图片懒加载")],-1);function k(v,w){const o=r("ExternalLinkIcon");return i(),l("div",null,[h,e("blockquote",null,[e("p",null,[e("a",g,[n("https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement"),t(o)])])]),u,e("blockquote",null,[e("p",null,[e("a",m,[n("https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"),t(o)])])]),b,_,f])}const E=s(p,[["render",k],["__file","dom_compute.html.vue"]]);export{E as default};
