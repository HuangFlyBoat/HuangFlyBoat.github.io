import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as t,e as a}from"./app-805c4ec5.js";const l={},d=a(`<p>在新公司实习有一段时间了，在大公司里面体验到了 git 的实际应用，有所心得分享一下。 重点讲解仓库方面，分支创建和提交记录整理</p><h1 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> Git</h1><h2 id="一、基础用法" tabindex="-1"><a class="header-anchor" href="#一、基础用法" aria-hidden="true">#</a> 一、基础用法</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>开始之前先来解释下 git 的几个概念</p><ol><li><p>工作区（Working Directory）：工作区是你当前正在修改文件的地方。你可以在工作区添加、修改或删除文件。</p></li><li><p>暂存区（Staging Area）：暂存区是一个中间区域，用于存储即将提交到版本库的修改。当你完成对文件的修改后，你可以将这些修改添加到暂存区。</p></li><li><p>版本库（Repository）：版本库是 Git 的核心部分，它包含项目的完整历史记录。它由一系列的提交（commits）组成，每个提交代表了一次文件修改的快照。版本库存储在.git 目录中。</p></li></ol></div><p><strong>一些常用的 Git 指令：</strong></p><ul><li><p>初始化仓库：</p><ul><li><code>git init</code>：在当前目录初始化一个新的 Git 仓库。</li><li><code>git clone &lt;url&gt;</code>: 克隆仓库</li><li><code>git clone -b &lt;branch_name&gt; &lt;url&gt;</code> 克隆远程仓库上的指定分支</li></ul></li><li><p>添加和提交文件：</p><ul><li><code>git add &lt;file&gt;</code>：将文件添加到暂存区。用 <code>git add ./</code> 来将所有修改的文件添加到暂存区里</li><li><code>git commit -m &quot;&lt;message&gt;&quot;</code>：提交暂存区的修改到版本库，并添加提交信息。</li></ul></li><li><p>分支管理：</p><ul><li><code>git branch</code>：列出所有分支。</li><li><code>git branch &lt;branch_name&gt;</code>：创建新的分支。</li><li><code>git switch &lt;branch_name&gt;</code>: 切换到指定分支，推荐使用。</li><li><code>git switch -c &lt;branch_name&gt;</code>: 创建并切换到对应分支，推荐使用。</li><li><code>git switch -</code>: 快速切换分支，切换到上一个分支</li><li><code>git checkout &lt;branch_name&gt;</code>：切换到指定分支。</li><li><code>git checkout -b &lt;branch_name&gt;</code>: 创建并切换到对应分支</li><li><code>git merge &lt;branch_name&gt;</code>：合并指定分支到当前分支。</li></ul></li><li><p>远程仓库：</p><ul><li><code>git remote add &lt;remote_name&gt; &lt;remote_url&gt;</code>：添加远程仓库。</li><li><code>git remote -v</code>：显示所有远程仓库。</li><li><code>git fetch</code>: 获取远程仓库的更新</li><li><code>git push &lt;remote_name&gt; &lt;branch_name&gt;</code>：将本地分支推送到远程仓库。</li><li><code>git pull &lt;remote_name&gt; &lt;branch_name&gt;</code>：从远程仓库拉取最新代码并合并到当前分支。</li></ul></li><li><p>查看状态和历史：</p><ul><li><code>git status</code>：显示工作区和暂存区的状态。</li><li><code>git log</code>：显示提交历史记录。</li><li><code>git diff</code>：显示工作区与暂存区的差异。</li><li><code>git show &lt;commit_id&gt;</code>：显示指定提交的详细信息和修改内容。</li></ul></li></ul><p>以上是一些基础的指令，也是工作中用得较多的。但是当出现复杂的场景时就不太够看了，往往是需要大费周章上网搜搜才能得到解决。</p><h2 id="二、git-进阶操作" tabindex="-1"><a class="header-anchor" href="#二、git-进阶操作" aria-hidden="true">#</a> 二、Git 进阶操作</h2><p>git reset 和 git rebase 一直是一个很困惑作者的点，来到公司后利用空余时间好好恶补了一下。 为什么恶补？因为想要让自己的提交记录更加干净，不想因为 bug 或者漏提而反复提交好几次 🤧</p><blockquote><p><strong>先说结论，reset 没有 rebase 灵活，简单的用 reset，复杂的情况用 rebase</strong> 在自己的提交还保留在本地并没有推送到远程仓库时， 更改自己的提交记录（注意是自己的且还没有推送的提交）是比较安全的</p></blockquote><div class="hint-container danger"><p class="hint-container-title">警告</p><p>修改提交历史可能会影响到其他分支或共享仓库的提交历史。因此，在对已经推送到共享仓库或与他人共享的分支进行 reset 和 rebase 操作时要小心，并确保与团队协商一致。</p></div><h3 id="_1、git-reset-撤销提交" tabindex="-1"><a class="header-anchor" href="#_1、git-reset-撤销提交" aria-hidden="true">#</a> 1、git reset 撤销提交</h3><p><strong>git reset 是一个用于修改分支指针的命令，它可以用于撤销提交、移动分支指针以及恢复文件到指定的提交状态</strong></p><p>以下是 git reset 命令的几种常见用法：</p><ul><li>撤销提交并保留更改：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git reset HEAD~ 撤销最近一次的提交，并将更改保留在工作区
git reset HEAD~3 代表着撤销最近三次的更改
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>撤销提交并丢弃更改:</li></ul><p>将撤销最近一次的提交，并丢弃所有更改，包括工作区和暂存区的修改 (别用，除非你真的对这次提交的代码失望透顶，永远不想看见 😠)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git reset --hard HEAD~
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>移动分支指针到指定的提交：</li></ul><p>把当前分支的指针移动到指定的提交，使得该提交成为当前的最新提交。这样做可能会导致分支历史的改变，因此在共享仓库或与他人协作时要小心使用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git reset &lt;commit&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>恢复文件到指定的提交状态：</li></ul><p>将指定文件恢复到指定提交的状态，丢弃在该提交之后对该文件所做的更改。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git reset &lt;commit&gt; &lt;file&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>git reset 后面还可以接各种参数，这些参数代表着不同的意义，默认是--mixed</strong></p><p>soft 和 mixed 差别并不大，一般也就用默认够了。重要的是工作区的保存，hard 会直接删掉不留痕迹，其他两个都可以在原有的更改上继续修改</p><p><code>--hard</code>：</p><p>分支指针移动：将分支指针移动到指定的提交，并将工作区和暂存区完全重置为该提交状态。</p><p>影响范围：会丢弃所有未提交的更改，包括工作区和暂存区的修改。这是一个潜在的危险操作，因为它会永久性地丢失你的更改。</p><pre><code>示例：\`git reset --hard &lt;commit&gt;\`
</code></pre><p><code>--soft</code>：</p><p>分支指针移动：将分支指针移动到指定的提交，但不会对工作区和暂存区进行任何修改。</p><p>影响范围：保留所有未提交的更改，包括工作区和暂存区的修改。这样，你可以重新提交这些更改或进行其他操作。</p><pre><code>示例：\`git reset --soft &lt;commit&gt;\`
</code></pre><p><code>--mixed</code>（默认选项）：</p><p>分支指针移动：将分支指针移动到指定的提交，并将工作区重置为该提交状态，但保留暂存区的修改 。 影响范围：丢弃暂存区的修改，但保留工作区的修改。这样，你可以重新选择要提交的更改，并进行适当的暂存操作。</p><pre><code>示例：\`git reset --mixed &lt;commit&gt;\`
</code></pre><div class="hint-container info"><p class="hint-container-title">使用 git reset 命令修改一个分支的历史时，会有以下几种情况：</p><ul><li><p>本地分支：如果你在本地仓库上修改分支的历史，尚未推送到远程仓库，那么只会影响你本地的仓库。其他人在拉取你的修改之前不会看到这些更改。</p></li><li><p>共享仓库中的分支：如果你在共享仓库中修改分支的历史，并将这些更改推送到共享仓库，那么这些更改将会影响到其他人。这是因为 git reset 会改变提交历史，使得原本的提交不再存在或不可访问。</p></li><li><p>如果你之后将修改的分支推送到共享仓库，并试图强制推送（例如使用 --force 选项），那么其他人在拉取时可能会遇到冲突，因为他们的本地分支与共享仓库中的历史不一致。</p></li></ul><p>在这种情况下，最好避免在共享仓库中执行 git reset 或其他会修改提交历史的命令，除非你与团队协商一致，并确保其他人能够适应和理解这些更改。</p></div><h3 id="_2、git-rebase-历史重排" tabindex="-1"><a class="header-anchor" href="#_2、git-rebase-历史重排" aria-hidden="true">#</a> 2、git rebase 历史重排</h3><p>在前面不难看出 git reset 很多时候只能单独处理一个提交记录，又或者是直接回退前几次的顺序提交。而我如果只是想要修改某一次的提交，或者重新组织下提交顺序就会非常麻烦。而 git rebase 是一个用于修改提交历史的命令，它可以将一系列提交应用到另一个分支上，并重新构建提交历史。</p><h3 id="_3、stash-储存" tabindex="-1"><a class="header-anchor" href="#_3、stash-储存" aria-hidden="true">#</a> 3、stash 储存</h3><h3 id="_4、merge-与-rebase-冲突解决" tabindex="-1"><a class="header-anchor" href="#_4、merge-与-rebase-冲突解决" aria-hidden="true">#</a> 4、merge 与 rebase 冲突解决</h3><h3 id="_5、cherry-pick-选择提交" tabindex="-1"><a class="header-anchor" href="#_5、cherry-pick-选择提交" aria-hidden="true">#</a> 5、cherry-pick 选择提交</h3><h2 id="三、项目管理" tabindex="-1"><a class="header-anchor" href="#三、项目管理" aria-hidden="true">#</a> 三、项目管理</h2><div class="hint-container info"><p class="hint-container-title">环境与分支</p><p>在实际开发中，项目的环境可以被分为 测试环境 -&gt; 预发布环境 -&gt; 正式环境。</p><p>相应的在仓库中也会经常看见有多个对应分支，一个主要的开发分支(main)，一个专门用于测试的分支(main-test)，还有一些其他人创建的单独分支(一般以开发者名字命名)</p><p>在根据 main 分支创建自己的分支后，又可以细分自己的分支为 bugFix （为修复 bug 而存在的分支）、feature （开发新功能的分支）</p></div><h3 id="_1、提交合并注意项" tabindex="-1"><a class="header-anchor" href="#_1、提交合并注意项" aria-hidden="true">#</a> 1、提交合并注意项</h3><div class="hint-container tip"><p class="hint-container-title">创建分支</p><p>进入公司都会创建自己的分支单独开发，一般选择已经测试过功能正常的稳定分支为基础创建新分支。 切记不要以测试分支为基础创建分支，会带上别人正在测试的不稳定功能！</p></div><ol><li><p>提交后推送到自己的远程仓库中，然后发起合并请求到测试分支上 （如果有冲突则在远程解决，也可以本地切到测试分支解决冲突）</p></li><li><p>测试无误后，该功能分支处于等待发布中。如果此时手里有新的需求，重新新建分支处理。</p></li><li><p>并不是测试无误后就能马上发布，一般一次发布不会只更新一个功能，这时需要与团队成员协商好一起发布，一个大版本的发布往往是好几个功能</p></li><li><p>准备发布，将自己的代码合并到 main 分支上。如果是一个大版本的话可能需要拉取上别人的功能进行统一发布。</p></li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>因为会出现开发完当前需求后但是并不急于发布的情况，如果继续在该分支开发，当需要发布时这个分支会带上不想马上发布的功能。因此最好是一个分支对应着一个需求</p></div><h3 id="_2、git-规约" tabindex="-1"><a class="header-anchor" href="#_2、git-规约" aria-hidden="true">#</a> 2、git 规约</h3><p>Git commit 规约是一种约定俗成的方式，用于规范化 Git 提交信息的格式和内容，以便更好地描述提交的目的和变更内容。这有助于团队成员更好地理解和追踪代码库的历史记录。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;

&lt;body&gt;

&lt;footer&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>&lt;type&gt;</code>（必需）：表示提交的类型，常见的类型包括：</strong>:</p><ul><li>feat：新功能（feature）</li><li>fix：修复问题（bug）</li><li>docs：文档更新</li><li>style：代码格式、样式调整，不涉及代码逻辑变动</li><li>refactor：代码重构，不涉及功能新增或修复问题</li><li>test：添加或修改测试相关的代码</li><li>chore：构建过程或辅助工具的变动</li></ul><p><code>&lt;scope&gt;</code>（可选）：表示提交的范围，例如模块、文件、组件等。可以根据项目的具体需要进行定义。</p><p><code>&lt;subject&gt;</code>（必需）：简明扼要地描述提交的目的</p><p><code>&lt;body&gt;</code>（可选）：用于详细描述提交的变更内容，可以包含多行</p><p><code>&lt;footer&gt;</code>（可选）：用于添加一些额外的信息，例如关联的 Issue 编号、变更的关闭策略等</p><p>例如： <code>git commit -m &#39;fix(index.js): 修复首页按钮点击没有反应&#39;</code></p><h2 id="四、实际场景" tabindex="-1"><a class="header-anchor" href="#四、实际场景" aria-hidden="true">#</a> 四、实际场景</h2><h3 id="_1、-提交后发现漏提了或者有-bug" tabindex="-1"><a class="header-anchor" href="#_1、-提交后发现漏提了或者有-bug" aria-hidden="true">#</a> 1、 提交后发现漏提了或者有 bug</h3><p>（注意在分支合并前可以这样操作，确保没有人使用自己的分支，如果有的话还是老老实实的新提交一个 commit 吧）</p><p>在 Git 中，git commit --amend 是一个用于修改最近一次提交的命令。它可以用于修改提交信息、添加漏掉的文件或修改文件内容</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 修改文件内容
git add modified_file.txt
git commit --amend
git push -f (强制自己的远程仓库和本地提交同步，如果还没有推送则不用)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以直接撤回</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git reset HEAD~ (回退到上一次提交前，上一次的修改内容依旧存在等待提交)
# 修改文件
git commit -m &#39;xxx&#39;
git push -f (强制自己的远程仓库和本地提交同步，如果还没有推送则不用)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、-冲突处理解决" tabindex="-1"><a class="header-anchor" href="#_2、-冲突处理解决" aria-hidden="true">#</a> 2、 冲突处理解决</h3><h3 id="_3、-开发过程中需求转换到更紧急的需求上" tabindex="-1"><a class="header-anchor" href="#_3、-开发过程中需求转换到更紧急的需求上" aria-hidden="true">#</a> 3、 开发过程中需求转换到更紧急的需求上</h3>`,69),r=[d];function n(c,s){return i(),t("div",null,r)}const p=e(l,[["render",n],["__file","git.html.vue"]]);export{p as default};
