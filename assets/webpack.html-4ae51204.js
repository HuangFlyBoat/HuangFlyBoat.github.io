import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as t,c as o,a as n,b as c,d as l,e as s}from"./app-eccf419a.js";const i={},u=s(`<h1 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> Webpack</h1><h2 id="一、模块化演变过程" tabindex="-1"><a class="header-anchor" href="#一、模块化演变过程" aria-hidden="true">#</a> 一、模块化演变过程</h2><p>在早期没有工具和规范的情况下对模块化的落地方式</p><ol><li>第一阶段</li></ol><p>最开始各个页面通过 script 来引入，但是模块一旦多了后？ 例如有如下两个模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;module-b&#39;</span>

<span class="token keyword">function</span> <span class="token function">method1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;xx&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">method2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;yy&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">--</span><span class="token operator">-</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;module-a&#39;</span>

<span class="token keyword">function</span> <span class="token function">method1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;zz&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">method2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mm&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接调用模块中的全局成员（变量或者函数）</p><ul><li>污染全局作用域</li><li>并且可以在模块外部任意的访问和修改</li><li>命名冲突问题</li><li>无法管理模块依赖方式</li></ul><p>原始方法完全依赖于约定</p><ol start="2"><li>第二阶段</li></ol><h5 id="命名空间方式" tabindex="-1"><a class="header-anchor" href="#命名空间方式" aria-hidden="true">#</a> 命名空间方式</h5><p>在第一个阶段上，我们将每个模块包裹成一个全局对象去使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;module-a&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">method1</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;zz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">method2</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>减小了命名冲突的问题，但是仍然没有私有空间，可以直接被访问和修改模块内部，并且模块之间依赖不明确</p><ol start="3"><li>第三阶段</li></ol><h5 id="立即执行函数" tabindex="-1"><a class="header-anchor" href="#立即执行函数" aria-hidden="true">#</a> 立即执行函数</h5><p>用函数将模块包裹住，并对于需要暴露给外部的部分，将其挂载到全局对象上来实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;module-a&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;zz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  window<span class="token punctuation">.</span>moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> method1<span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> method2<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现了私有成员的概念，模块内部的成员只能通过闭包的方式去访问，外部无法直接访问和修改。并且可以通过立即执行函数的参数来作为依赖声明使用，使得各个模块的依赖关系明显</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;module-a&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;zz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token string">&#39;200px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  window<span class="token punctuation">.</span>moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> method1<span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> method2<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、模块化规范的出现" tabindex="-1"><a class="header-anchor" href="#二、模块化规范的出现" aria-hidden="true">#</a> 二、模块化规范的出现</h2><p>在原本的方式出，都是以原始的模块为几处，通过约定来达成规约。而不同项目的不同约定可能不一样，并且模块中的加载方式都是通过 script 标签来导入，并不受代码的控制，时间久了维护困难。（当我们移除了某个模块，还要去对应的 html 文件中删除 script 引用）</p><p><strong>需要 模块化的标准 和 模块加载器</strong></p><ol><li>模块化标准 CommonJS 约定如下： <ul><li>一个文件就是一个模块</li><li>每个模块都有单独的作用域</li><li>通过 module.exports 导出成员</li><li>通过 require 函数导入模块</li></ul></li></ol><p>但是在前端浏览器上使用此规范的话会有问题</p><blockquote><p>CommonJS 约定的是以同步的方式去加载模块，因为 Node 的执行机制是在启动时加载模块，在执行过程中并不需要加载模块，只需要去使用模块，所以这种约定在 Node 端并不会有问题</p></blockquote><p>浏览器端同步必然导致效率低下，因为每一次页面加载都会导致大量的同步请求出现，所以在早期的前端模块化规约中并没有选择 CommomJS 这个规范</p><p><strong>针对浏览器端特点设计出了 AMD（Asynchronous Module Definition）</strong>。同期还推出了一个库 Require.js 实现了 AMD 规范，并且其本身也是个非常强大的模块加载器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个模块</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;moduleName&#39;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;./module2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$<span class="token punctuation">,</span>module2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">{</span>
        <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token function">funcion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span> <span class="token punctuation">{</span><span class="token literal-property property">margin</span><span class="token operator">:</span><span class="token string">&#39;200px&#39;</span><span class="token punctuation">}</span> <span class="token punctuation">)</span>
            <span class="token function">module2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，require 中还提供了一个 require 函数，用来帮我们自动加载函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;moduleName&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">moduleName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  mouduleName<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但 require.js 需要加载模块，内部会自动创建一个 script 标签去发送对应的脚本文件请求。</p><p>目前大多数模块都支持 AMD 规范，但 AMD 规范的使用比较复杂，需要不断 define 和 require，有很多的操作模块的代码，如果项目模块划分细致的话，同一个页面对 JS 的请求次数就会过多</p><blockquote><p>AMD 一种妥协的方法，并不是最好的，给前端模块化提供了一个标准，同期还出现了类似的由淘宝开发的 Sea.js+CMD 标准</p></blockquote><h5 id="现代最佳实践" tabindex="-1"><a class="header-anchor" href="#现代最佳实践" aria-hidden="true">#</a> 现代最佳实践</h5><p>在 nodeJS 中遵循 CommomJS 规范去组织模块，而在浏览器环境中采用 ES Module 的规范</p><p>ES Module ： ECMAScript 2015（ES6）</p><p>截止到目前 ES Module 基本上算最主流的前端模块化方案，相比较 AMD 这种社区提出的规划，ES Module 是从语言层面去实现了模块化</p><h2 id="三、es-module" tabindex="-1"><a class="header-anchor" href="#三、es-module" aria-hidden="true">#</a> 三、ES Module</h2><h4 id="_1-es-module-的特性" tabindex="-1"><a class="header-anchor" href="#_1-es-module-的特性" aria-hidden="true">#</a> 1. ES Module 的特性</h4><p>如何使用？</p><p>通过给 script 标签添加 type=module 的属性即可 <code>&lt;script type=&quot;module&quot;&gt; &lt;/script&gt;</code></p><ol><li><p>ESM 自动采用严格特性</p></li><li><p>每个 ES Module 都是运行在单独的私有作用域中</p></li><li><p>ESM 是通过 CORS 的方式请求外部 JS 模块的</p></li><li><p>script 标签会延迟执行脚本（给 script 标签添加 type=module 相当于给 script 添加了 defer）。不会阻塞页面渲染</p></li></ol><h4 id="_2-es-module-导出" tabindex="-1"><a class="header-anchor" href="#_2-es-module-导出" aria-hidden="true">#</a> 2. ES Module 导出</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;foo module&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token keyword">export</span> Person<span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 又或者统一导出</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>hello<span class="token punctuation">,</span>Person<span class="token punctuation">}</span>

<span class="token comment">// 可以通过 as 来取别名</span>
<span class="token comment">// 默认导出的内容</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">&quot;x&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意 export 导出的括号符并不是对象字变量，而是一个固定语法</strong></p><p>而<code> export default {xxx}</code>则是对象字变量的直接导出了，无法被 import 接收到</p><p>export 导出的是引用并且是只读的，无法修改</p><h4 id="_3-es-module-导入" tabindex="-1"><a class="header-anchor" href="#_3-es-module-导入" aria-hidden="true">#</a> 3. ES Module 导入</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./module.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><p>ESM 导入的 from 后面必须填写完整路径和文件名（但在打包工具中可以去省略扩展名和 index.js）</p></li><li><p>ESM 相对路径导入当前文件是不能省略 ./ 的</p></li><li><p>导入可以填写一个完整的 url 或者绝对路径</p></li><li><p>如果只需要执行模块内的内容，不需要提取内容。可以这样</p><p><code>import {} from &quot;./module&quot;</code><code>import &#39;./module</code></p></li><li><p>可以把模块中导出的所有成员导入并放入一个重命名的对象里 <code>import * as mod from &#39;./module&#39;</code></p></li><li><p>动态导入模块，在不确定导入路径又或者是否导入时使用 import 方法。普通的 import 无法放入 if 里面，放入最顶部且并且必须事先知道路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;/module.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当模块加载完成时候会自动执行模块，模块的内容可以通过参数获得</p></li><li><p>同时导入默认导出成员和指定成员,导入默认成员可以随意起个别名</p><p><code>import title,{name,age} from &quot;./module</code></p></li><li><p>导入后马上导出，常见于 index.js 中集中导出方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js 相当于桥梁，整合后导出</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./button.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> Avatar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./avatar.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="四、-es-module-环境支持" tabindex="-1"><a class="header-anchor" href="#四、-es-module-环境支持" aria-hidden="true">#</a> 四、 ES Module 环境支持</h2><h4 id="_1-浏览器支持" tabindex="-1"><a class="header-anchor" href="#_1-浏览器支持" aria-hidden="true">#</a> 1. 浏览器支持</h4><p>Polyfill 用于专门使浏览器支持 ES Module 语法</p><p>可以在 script 中添加 nomodule 属性来使得不支持 ES Module 的脚本来执行</p><h4 id="_2-es-module-in-node-js" tabindex="-1"><a class="header-anchor" href="#_2-es-module-in-node-js" aria-hidden="true">#</a> 2. ES Module in Node.js</h4><h2 id="五、模块化打包工具-webpack" tabindex="-1"><a class="header-anchor" href="#五、模块化打包工具-webpack" aria-hidden="true">#</a> 五、模块化打包工具 Webpack</h2><blockquote><p>模块文件多，网络请求频繁。ES Module 浏览器支持问题，新特性代码编译。除了 JS 需要模块化，后续其他资源可能都需要</p></blockquote><p>开发阶段模块化开发，生产环境整合在一起</p><p>如何支持不同类型的资源模块打包？</p><p>webpack 是 node 环境下运行的代码</p><p>核心特性：</p><ul><li>模块打包器(Module bundler) 将零散的模块打包在一起</li><li>模块加载器(Loader) 解决模块兼容问题</li><li>代码拆分(Code Splitting) 按需打包代码，打包初次运行必须的。其他的再异步加载，或者增量加载</li><li>资源模块(Asset Module) 在 JS 中以模块化的方式加载任何类型的文件</li></ul><p>对整个前端整体的模块化，并不只是 JS</p><h4 id="_1-快速上手" tabindex="-1"><a class="header-anchor" href="#_1-快速上手" aria-hidden="true">#</a> 1. 快速上手</h4><p><code>yarn init</code> 初始化</p><p><code>yarn add webpack-cli --dev</code> 下载 webpack</p><p><code>yarn webpack --version</code> 运行查看版本</p><p><code>yarn webpack</code> 打包，自动的从 src 下的 index.js 下开始打包。打包结果存放在 dist 文件夹下 main.js</p><h4 id="_2-配置文件" tabindex="-1"><a class="header-anchor" href="#_2-配置文件" aria-hidden="true">#</a> 2. 配置文件</h4><p>5 大核心概念</p><ol><li>entry 入口</li><li>output 输出</li><li>loader 加载器(module.rules)</li><li>plugins 插件</li><li>mode 模式</li></ol><p>主要两种模式：</p><ul><li>开发模式:development</li><li>生产模式:production</li></ul><p>在项目根目录下添加 webpack.config.js 文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// node环境下载入path模块</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 指定webpack打包入口文件的路径,注意相对路径./在这里不能省略</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/main.js&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 输出相关的</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置打包结果的名字</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 设置输出目录，绝对路径。在output目录下生成打包结果</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;output&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 加载器</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// loader 的配置</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 插件</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// plugins的配置</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 模式</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-开发模式介绍" tabindex="-1"><a class="header-anchor" href="#_3-开发模式介绍" aria-hidden="true">#</a> 3. 开发模式介绍</h4><p>这个模式下主要做两件事：</p><ol><li>编译代码，使浏览器能识别运行</li></ol><p>开发时我们有样式资源、字体资源、图片资源、html 资源等，webpack 默认都不能处理这些资源，所以我们要加载配置来编译这些资源</p><ol start="2"><li>代码质量检测，树立代码规范</li></ol><p>提前检查代码的一些隐患，让代码运行时能更加健壮</p><p>提前检查代码规范和格式，统一团队编码风格，让代码更加优雅美观</p><h4 id="_4-处理样式资源" tabindex="-1"><a class="header-anchor" href="#_4-处理样式资源" aria-hidden="true">#</a> 4.处理样式资源</h4><p>Webpack 本身并不能识别样式资源，需要借助 Loader 来帮助 Webpack 解析样式资源。<strong>Loader 是 Webpack 的核心特征了，借助不同的 Loader 就可以加载任何类型的资源</strong>。</p><h5 id="_4-1-处理-css-资源" tabindex="-1"><a class="header-anchor" href="#_4-1-处理-css-资源" aria-hidden="true">#</a> 4.1 处理 CSS 资源</h5>`,86),r={href:"https://webpack.docschina.org/loaders/css-loader",target:"_blank",rel:"noopener noreferrer"},d=s(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span> <span class="token comment">//只检测.css文件</span>
        <span class="token comment">// 执行顺序，从右往左（从下往上）</span>
        <span class="token comment">// 对应 loader 都需要下载</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 在js中css通过创建style标签添加到html文件中生效</span>
          <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 将css资源编译成commonjs的模块到js中</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-处理图片资源" tabindex="-1"><a class="header-anchor" href="#_4-2-处理图片资源" aria-hidden="true">#</a> 4.2 处理图片资源</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//webpack.config.js</span>

<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;main.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.txt</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;asset&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**现在，webpack 将按照默认条件，自动地在 resource 和 inline 之间进行选择：小于 8kb 的文件，将会视为 inline 模块类型，否则会被视为 resource 模块类型。

可以通过在 webpack 配置的 module rule 层级中，设置 Rule.parser.dataUrlCondition.maxSize 选项来修改此条件：
**/</span>
webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js<span class="token punctuation">;</span>

<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;main.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.txt</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;asset&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 4kb</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-3-css-处理" tabindex="-1"><a class="header-anchor" href="#_4-3-css-处理" aria-hidden="true">#</a> 4.3 Css 处理</h5><p><strong>MiniCssExtractPlugin</strong> 插件实现</p><p>之前 Css 文件被打包到了 js 文件中，当 js 文件加载时，会创建一个 style 标签来生成样式。这样对于网站来说会出现闪屏现象，用户体验不好。</p><p>我们应该是单独的 CSS 文件，通过 link 标签加载性能才好</p><p>这样就不用等 js 执行完才有样式</p><h5 id="_4-4-css-兼容性处理" tabindex="-1"><a class="header-anchor" href="#_4-4-css-兼容性处理" aria-hidden="true">#</a> 4.4 Css 兼容性处理</h5><ul><li>postcss-loader</li><li>postcss</li><li>postcss-preset-env 智能预设</li></ul><h5 id="_4-5-css-压缩" tabindex="-1"><a class="header-anchor" href="#_4-5-css-压缩" aria-hidden="true">#</a> 4.5 Css 压缩</h5><p>使用插件优化压缩 CSS CssMinimizerWebpackPlugin</p><h2 id="六、原理-loader" tabindex="-1"><a class="header-anchor" href="#六、原理-loader" aria-hidden="true">#</a> 六、原理 Loader</h2><h3 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1.介绍</h3><p>loader 帮助 webpack 将不同类型的文件转换为 webpack 可识别的模块</p><p>loader 执行顺序：</p><ul><li>pre：前置 loader</li><li>normal：普通 loader</li><li>inline：内联 loader</li><li>post 后置 loader</li></ul><p>pre &gt; normal &gt; inline &gt; post</p><p>相同优先级的 loader 执行顺序为：从右到左、从下到上</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 执行顺序 1 2 3</span>
<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;loader1&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// 没有enforce就是normal</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;loader2&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;loader3&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-开发一个-loader" tabindex="-1"><a class="header-anchor" href="#_2-开发一个-loader" aria-hidden="true">#</a> 2. 开发一个 loader</h3><p>loader 就是一个函数 当 webpack 解析资源时，会调用 loader 去处理 loader 接收文件内容作为参数，返回内容出去</p><ul><li>content 文件内容</li><li>map SourceMap</li><li>meta 别的 loader 传递的数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> content<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-loader-分类" tabindex="-1"><a class="header-anchor" href="#_3-loader-分类" aria-hidden="true">#</a> 3. loader 分类</h3><h4 id="_3-1-同步-loader" tabindex="-1"><a class="header-anchor" href="#_3-1-同步-loader" aria-hidden="true">#</a> 3.1 同步 loader</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/*
  第一个参数：err代表是否有错误
  第二个参数：content处理后的内容
  第三个参数：source-map 继续传递source-map
  第四个参数：meta传递给下一个loader
  */</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-异步-loader" tabindex="-1"><a class="header-anchor" href="#_3-2-异步-loader" aria-hidden="true">#</a> 3.2 异步 loader</h4><p>当存在异步调用的时候必须这样先声明</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/*
  第一个参数：err代表是否有错误
  第二个参数：content处理后的内容
  第三个参数：source-map 继续传递source-map
  第四个参数：meta传递给下一个loader
  */</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> map<span class="token punctuation">,</span> meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-raw-loader" tabindex="-1"><a class="header-anchor" href="#_3-3-raw-loader" aria-hidden="true">#</a> 3.3 raw loader</h4><p>raw loader 接收到 content 是 Buffer 数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> content<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>raw <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-loader-api" tabindex="-1"><a class="header-anchor" href="#_4-loader-api" aria-hidden="true">#</a> 4. loader Api</h3><table><thead><tr><th>方法名</th><th>含义</th><th>用法</th></tr></thead><tbody><tr><td>this.async</td><td>异步回调 loader。返回 this.callback</td><td>const callback = this.async()</td></tr><tr><td>this.callback</td><td>可以同步或异步调用并返回多个结果的函数</td><td>this.callback(err,content,sourceMap?,meta?)</td></tr><tr><td>this.getOptions(schema)</td><td>获得 loader 的 options</td><td>this.getOptions(schema)</td></tr><tr><td>this.emitFile</td><td>产生一个文件</td><td>this.emitFile(name,content,sourceMap)</td></tr><tr><td>this.utls.contextify</td><td>返回一个相对路径</td><td>this.utils.contextify(context,request)</td></tr><tr><td>this.utils.absolutify</td><td>返回一个绝对路径</td><td>this.utils.absolutify(context,request)</td></tr></tbody></table><h3 id="_5-自定义-loader" tabindex="-1"><a class="header-anchor" href="#_5-自定义-loader" aria-hidden="true">#</a> 5. 自定义 loader</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">export</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">console\\.log\\(.*\\);?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七、原理-plugin" tabindex="-1"><a class="header-anchor" href="#七、原理-plugin" aria-hidden="true">#</a> 七、原理 plugin</h2><blockquote><p>wabpack 就像是一条流水线，要经过一系列的处理流程后才能将源文件转换成输出结果，这条生产线的每个处理流程的职责是单一的，多个流程之间有依赖关系，只有完成当前处理后才能交给下一个流程去处理。插件就像是一个插入到生产线中的一个功能，在特定的时机对生产线上的资源做处理。webpack 通过 tapable 来组织这条复杂的生产线。webpack 在运行过程中会广播事件，插件只需要监听它所关心的事件，就能加入到这条生产线中，去改变生产线的运作</p></blockquote><p>webpack 在编译的过程中，会触发一系列的 Tapable 钩子事件，插件所做的就是找到对应的钩子，在上面挂上自己的任务，也就是注册事件，这样在 webpack 构建过程中，插件注册的事件就会随着钩子的触发而执行了</p><h3 id="_1-第一个-plugin" tabindex="-1"><a class="header-anchor" href="#_1-第一个-plugin" aria-hidden="true">#</a> 1 第一个 plugin</h3><h3 id="_2" tabindex="-1"><a class="header-anchor" href="#_2" aria-hidden="true">#</a> 2</h3><h2 id="八、打包性能优化" tabindex="-1"><a class="header-anchor" href="#八、打包性能优化" aria-hidden="true">#</a> 八、打包性能优化</h2><h2 id="九、资源推荐" tabindex="-1"><a class="header-anchor" href="#九、资源推荐" aria-hidden="true">#</a> 九、资源推荐</h2>`,44);function k(v,m){const a=p("ExternalLinkIcon");return t(),o("div",null,[u,n("p",null,[n("a",r,[c("https://webpack.docschina.org/loaders/css-loader"),l(a)])]),d])}const g=e(i,[["render",k],["__file","webpack.html.vue"]]);export{g as default};
