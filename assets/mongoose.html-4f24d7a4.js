import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-ac9850e2.js";const p={},o=e(`<h1 id="mongoose-快速入门" tabindex="-1"><a class="header-anchor" href="#mongoose-快速入门" aria-hidden="true">#</a> Mongoose 快速入门</h1><p>Mongoose 是一个用于 Node.js 环境下操作 MongoDB 数据库的对象数据建模（ODM）工具。它提供了一套简便的 API，让开发者能够更轻松地与 MongoDB 进行交互。</p><h2 id="创建连接、schema-与-modal-定义" tabindex="-1"><a class="header-anchor" href="#创建连接、schema-与-modal-定义" aria-hidden="true">#</a> 创建连接、schema 与 modal 定义</h2><h3 id="连接" tabindex="-1"><a class="header-anchor" href="#连接" aria-hidden="true">#</a> 连接</h3><p><code>mongoose.connect</code> 方法连接到 MongoDB 数据库，MongoDB的默认端口号为27017，这里也可以省略会默认指向27017的端口</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入依赖</span>
<span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 连接到 MongoDB 数据库，mydatabase 为数据库的名称</span>
mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://localhost:27017/mydatabase&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">useNewUrlParser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 设置 useNewUrlParser: true，手动启用新解析器，从而避免旧解析器的兼容性问题</span>
   <span class="token literal-property property">useUnifiedTopology</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 同上，消除兼容性的警告使用</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过 on 方法监听连接相应的事件，open、close、error等，具体可查官方文档</span>
mongoose<span class="token punctuation">.</span>connect<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;已连接&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shema-和-modal" tabindex="-1"><a class="header-anchor" href="#shema-和-modal" aria-hidden="true">#</a> Shema 和 modal</h3><ul><li><p>在 Mongoose 中，Schema 是用来定义 MongoDB 集合中文档的数据结构的</p></li><li><p>类似于 mysql 里表的概率，在 MongoDB 里面用 schema 来表示，约束了字段和类型。通过mongoose来创建schema，能够对类型和字段进行强约束。</p></li><li><p>一般 MongoDB 与 MySQL 存储数据的角度并不一样，它并不在意数据冗余，也不考虑范式，MongoDB 适用于存储独立性强的数据，数据与数据之间联系比较少，不适合需要过多连表查询的业务</p></li><li><p>因此 schema 的定义上应该注意和 mysql 的表设计有所差异，具体表现在将所有会用的字段都聚合在了一起，一条数据对应的字段会有嵌套来表示内在关系，而不是重新定义一个 schema 来区分。当然通用的 schema 也会进行复用，如通用的数据结构</p></li><li><p>定义好 schema 后，往里面插入数据是接入模型 modal 的相关api，因此要先创建模型并对外暴露，或者暴露一些通用方法</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定义一个用户的 Schema</span>
<span class="token keyword">const</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">uid</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 标记该字段为索引，会创建索引</span>
    <span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 创建唯一索引，mongoose 验证使用</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// 类型为 string，mongoose 验证使用</span>
    <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 必须存在，mongoose 验证使用</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// 简单的结构也可以之间书写类型</span>
  <span class="token literal-property property">favors</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 数组类型的定义方式</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 限定数组类型为字符串数组，如果不限制则使用 [] 或者 Array</span>
    <span class="token literal-property property">require</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 对象类型的定义</span>
    <span class="token comment">// type: addressSchema 也可以创建通用的 schema，从外界导入对应的 schema</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">country</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token literal-property property">province</span><span class="token operator">:</span> String 
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">require</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">extra</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">createdAt</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> Date<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> Date<span class="token punctuation">.</span>now <span class="token punctuation">}</span> <span class="token comment">// 创建时间字段，默认为当前时间</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 基于 Schema 创建一个用户模型，此时会在连接的 db 里创建一个 User 的集合，里面目前没有数据</span>
<span class="token keyword">const</span> User <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;User&#39;</span><span class="token punctuation">,</span> userSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  User
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是在定义后并不会直接在 MongoDB 里创建对应的集合，会在模型使用时才会自动创建集合。</p><p>并且，如果后续要删除字段，也不会影响到之前 db 里已有的数据，新增的字段则会在之后新增的数据里带上。</p><p>索引的删除需要特别注意，它并不会与你在 schema 里定义的索引同步，当你在 schema 里删除 unique 或者 index 等索引时，并不会实际生效。这时需要用到指定的方法来同步结构，如以下所示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过这种方式，会在后台执行命令同步schema的索引，详情见官网文档</span>
<span class="token comment">// This function will drop any indexes that are not defined in the model&#39;s schema except the _id index, and build any indexes that are in your schema but not in MongoDB.</span>
<span class="token comment">// https://mongoosejs.com/docs/api/model.html#Model.syncIndexes()</span>
<span class="token keyword">await</span> MyModel<span class="token punctuation">.</span><span class="token function">syncIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 如果只是想删除索引，则也可以使用下面这种方式</span>
<span class="token comment">// MyModel 为你通过 mongoose.model(&#39;collegeName&#39;, userSchema); 创建的</span>
MyModel<span class="token punctuation">.</span>collection<span class="token punctuation">.</span><span class="token function">dropIndexes</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Handle errors</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="新增文档" tabindex="-1"><a class="header-anchor" href="#新增文档" aria-hidden="true">#</a> 新增文档</h2><p>通过mongoose定义好模型后，再通过mongoose进行增加数据时便会自动验证，但验证是基于mongoose的，如果直接通过 MongoDB 的控制台指令来插入数据，并不会有验证</p><p>在保存时，mongoose 会自动为每一个对象，包括对象里面的子对象添加唯一键 _id，类型为 ObjectId，可以在配置属性时设置 <code>_id: false</code> 来关闭</p><p>在保存时会进行规则验证，当不通过时会报错，如唯一索引出现了重复(错误码：E11000)，缺失了必选的属性等。但是如果出现了 schema 没有定义的多余的属性，内部不会报错，会自动去除多余的属性字段</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./models&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;xx&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">country</span><span class="token operator">:</span> <span class="token string">&#39;test-country&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">province</span><span class="token operator">:</span> <span class="token string">&#39;test-provinece&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 保存方式一，回调</span>
model<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// result 为保存后返回的模型实例，可以继续调用 save 方法，也可以直接访问并修改相关属性</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 保存方式二，异步</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> model<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 保存方式三，推荐，直接调用接口方式，支持同时传多个对象进行批量保存</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 批量创建，使用第一个参数为对象数组，第二个为配置参数</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span>params<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 

<span class="token comment">// 批量创建时还可以使用 inserMany 方法进行大量创建, 效率较高</span>
<span class="token comment">// 第一个参数为对象数组，第二个为配置参数</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span><span class="token punctuation">[</span>params<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询文档" tabindex="-1"><a class="header-anchor" href="#查询文档" aria-hidden="true">#</a> 查询文档</h2><p><code>Model.find(filter, projection);</code> filter为查询参数，类型为对象。projection是投影，可选参数，类似于 mysql 的 select</p><p>查询通过 find 函数来实现，后面通过点的方式来链式调用查询后的函数，如排序 <code>.sort()</code> 和计数 <code>.count()</code>，跳过 <code>.skip()</code>，链式调用的函数顺序并不会影响结果</p><p>查询条件为空对象时表示查询所有 <code>find({})</code></p><p>模糊查询可以直接书写正则 <code>find({name: /王/})</code></p><p>在查询中如果涉及到或和且等复杂逻辑时，以 <code>$开头</code> 的属性被称为操作符，以下为常见的操作符：</p><ul><li><code>$and</code>：与操作 <code>User.find({ $and: [{ age: { $gt: 18 } }, { age: { $lt: 30 } }] }）</code></li><li><code>$or</code>: 或者 <code>User.find({ $or: [{ age: { $lt: 18 } }, { age: { $gt: 65 } }] })</code></li><li><code>$in</code>: 在指定数组中， <code>User.find({ &#39;age&#39;: { $in: [18, 20] } })</code></li><li><code>$nin</code>: 不在指定数组中</li><li><code>$gt</code>: 大于</li><li><code>$gte</code>: 大于等于</li><li><code>$lt</code>:小于</li><li><code>$lte</code>: 小于等于</li><li><code>$exist</code>: 查找存在某条属性的对象 <code>User.find({ &#39;address&#39;: { $exists: true } })</code></li><li><code>$regex</code>: 正则，{ name: { $regex: /^A/, $options: &#39;i&#39; } } // 以 A 开头，不区分大小写</li></ul><p>如果查询条件为文档里嵌套对象的某个属性，则可以直接书写属性名 <code>User.find(&#39;address.country&#39; : {})</code> 来表示</p><p>mongoose 扩充了原本MongoDB的 find 方法，提供了</p><ul><li>findOne: 查询单条数据</li><li>findById: 用于根据文档的唯一标识符（ _id 字段, 可以是字符串或 ObjectId 类型）查找特定文档。<code>User.findById(&quot;12153&quot;)</code></li></ul><p>使用 findById 时，始终是根据 _id 字段进行查找，而不是你在 Schema 中定义的其他字段（如 id）。如果需要根据自定义字段查询，可以使用 findOne 或其他查询方法。</p><p>如果不可避免涉及到多个表直接的联合查询，MongoDB也有提供联表操作 <code>User.find().poplate(属性名, 投影字段)</code>,属性名需要在对应定义时用 ref 指定外链的集合，且属性名的值为外链集合的_id。这时候会自动将对应关联的表单数据一并查出来</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./models&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span>

<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;xx&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">country</span><span class="token operator">:</span> <span class="token string">&#39;test-country&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">province</span><span class="token operator">:</span> <span class="token string">&#39;test-provinece&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">operations</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span>
    <span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token string">&quot;Operation&quot;</span> <span class="token comment">// _id 关联表的名称</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更新与删除" tabindex="-1"><a class="header-anchor" href="#更新与删除" aria-hidden="true">#</a> 更新与删除</h2><h3 id="调用原生的更新方法" tabindex="-1"><a class="header-anchor" href="#调用原生的更新方法" aria-hidden="true">#</a> 调用原生的更新方法</h3><ul><li><code>db.User.updateOne(filter, updateParams)</code></li><li><code>db.User.updateMany(filter, updateParams)</code></li></ul><p>filter 格式与 find 方法一致，updateParameters 里书写要更新的属性和对应值，使用 <code>$set</code> 操作符。如： <code>db.User.updateOne({_id:&quot;xxx&quot;}, {$set: {name: &#39;newName&#39;}})</code></p><p>返回类型为一个对象，其中包含着操作是否成功执行 acknowledged, 以及实际修改的文档数量 modifiedCount 和匹配到的数量 matchedCount。当修改时并没有与原有值产生变化，则会返回 modifiedCount 为 0</p><p>除了 set 操作符外，还有一些直接更改结构的操作，通常用于处理新老数据结构上兼容的问题</p><ul><li><code>$rename</code>: 重命名，将指定的属性名进行更改。如将 name 修改为 label, <code>User.updateOne({_id:&quot;xxx&quot;}, {$rename: {name: &quot;label&quot;}}</code></li><li><code>$unset</code>: 用于从文档中移除指定的字段，删除文档中不再需要的字段，而保留其他字段的数据。删除在 $unset 的值中，通常可以用空字符串或 null，Mongoose 会识别到这是一个删除操作。实际的值并不重要，关键是字段的键名。<code>User.updateOne({ _id: userId }, { $unset: { age: &quot;&quot; } })</code></li></ul><p>如何更新数组里面的元素 ？</p><ul><li><code>$push</code> 向数组中添加新元素，<code>User.updateOne({ _id: userId }, { $push: { friends: &#39;newFriendId&#39; }})</code></li><li><code>$pull</code> 从数组中删除特定元素 <code>User.updateOne({ _id: userId }, { $pull: { friends: &#39;friendIdToRemove&#39; }})</code></li><li><code>$set</code> 和 <code>$</code> 修改指定元素，根据查询条件来修改 <code>User.updateOne({ _id: userId, &#39;friends.friendId&#39;: &#39;friendIdToUpdate&#39; }, { $set: { &#39;friends.$&#39;: &#39;newFriendId&#39; }})</code></li></ul><p>当然也可以先查找到该数据，然后修改该数据后再存入到db里</p><h3 id="mongoose-更新功能扩展" tabindex="-1"><a class="header-anchor" href="#mongoose-更新功能扩展" aria-hidden="true">#</a> mongoose 更新功能扩展</h3><p>在 mongoose 里面调用 updateOne 或者 updateMany 时并不用书写 <code>$set</code>，可以直接写要更新的属性和对应值</p><p>需要注意的是，默认情况下 mongoose 更新操作并不会触发验证，需要在 option 里设置 <code>runValidators: true</code></p><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h3><p>删除，也是两个通用方法，MongoDB原生支持 <code>deleteOne(filter)</code> 与 <code>deleteMany(filter)</code>，mongoose 也是</p><h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h2><p>索引的作用主要是显著提高查询效率，但会增加额外的存储空间，它们类似于书籍的目录，允许快速查找特定数据而无需扫描整个集合。</p><ul><li><strong>创建索引</strong></li></ul><p>使用 MongoDB Shell 创建索引：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.users.createIndex<span class="token punctuation">(</span><span class="token punctuation">{</span> name: <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 第一个参数为索引的 key，第二个参数为配置项
db.users.createIndex<span class="token punctuation">(</span><span class="token punctuation">{</span> email: <span class="token number">1</span> <span class="token punctuation">}</span>, <span class="token punctuation">{</span> unique: true, background: true, name: <span class="token string">&#39;email&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 创建唯一索引, 设置后台运行不会阻塞其他数据库操作，索引名称为 email，
db.users.getIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span> // 查看所有索引
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在定义模型时，可以在 Schema 中使用 index 方法或直接在字段上添加 index 选项。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 创建单字段索引</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token comment">// 创建唯一索引</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建复合索引</span>
userSchema<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// age 升序, name 降序</span>

<span class="token keyword">const</span> User <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;User&#39;</span><span class="token punctuation">,</span> userSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>删除索引</strong></li></ul><p>删除所有索引： <code>User.collection.dropIndexes(); </code> 删除指定名称 name_1(自动生成的名称) 索引: <code>User.collection.dropIndex(&#39;name_1&#39;);</code></p><p>应该尽量避免在程序运行的过程中，频繁的创建和删除索引，且只对有必要的场景使用索引</p>`,56),t=[o];function c(l,i){return s(),a("div",null,t)}const d=n(p,[["render",c],["__file","mongoose.html.vue"]]);export{d as default};
