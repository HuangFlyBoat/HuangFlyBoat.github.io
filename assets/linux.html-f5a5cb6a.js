import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,e as n}from"./app-eccf419a.js";const s="/assets/images/Server/kernel.png",d="/assets/images/Server/distribution.png",l="/assets/images/Server/bootloader.png",c={},t=n('<h1 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> Linux</h1><h2 id="前置知识-基础术语了解" tabindex="-1"><a class="header-anchor" href="#前置知识-基础术语了解" aria-hidden="true">#</a> 前置知识 基础术语了解</h2><ul><li><p>Kernel</p><p>Linux的内核，操作系统的大脑，它控制着系统硬件并制造硬件和应用程序的交互</p><figure><img src="'+s+'" alt="kernel" tabindex="0" loading="lazy"><figcaption>kernel</figcaption></figure></li><li><p>distribution</p><p>发行版是一系列程序结合包含了 Linux 内核共同组成 Linux 操作系统，一些常见的发行版示例如：red hat Enterprise Linux Fedora, Ubantu, gen2</p><figure><img src="'+d+'" alt="发行版" tabindex="0" loading="lazy"><figcaption>发行版</figcaption></figure></li><li><p>boot loader</p><p>在操作系统内核运行前执行的一小段程序，如 grub, isolinux</p><figure><img src="'+l+`" alt="boot" tabindex="0" loading="lazy"><figcaption>boot</figcaption></figure></li><li><p>service</p><p>一段运行在后台进程的程序，如 httpd, nfsd, ntpd</p></li><li><p>filesysterm</p><p>文件系统是Linux的一种存储方式，如 ext3, ext4</p></li><li><p>X Window system</p><p>提供了标准的工具包和协议，用于构建几乎所有的图形用户界面</p></li><li><p>desktop environment</p><p>操作系统顶部的图形用户界面</p></li><li><p>command line</p><p>命令行是一个提供输入命令的接口</p></li><li><p>Shell</p><p>命令行解释器，用于解释命令行的输入并指示操作系统去执行任何必要的任务和命令，如 bash, TC shell, Z shell</p></li></ul><h2 id="linux-目录结构" tabindex="-1"><a class="header-anchor" href="#linux-目录结构" aria-hidden="true">#</a> Linux 目录结构</h2><p>Linux 的目录结构是一个树型结构，并且顶层为 <code>/</code> (windows顶层就可以有 c 盘, d 盘等)</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在Linux系统中，路径之间的层级关系用 <code>: /</code> 表示, 如： /usr/local/hello.txt</p><p>在Windows系统中，路径之间的层级关系用 <code>: \\</code> 表示, 如: D:\\data\\work\\hello.txt</p></div><h2 id="linux-常用指令" tabindex="-1"><a class="header-anchor" href="#linux-常用指令" aria-hidden="true">#</a> Linux 常用指令</h2><h3 id="命令基础" tabindex="-1"><a class="header-anchor" href="#命令基础" aria-hidden="true">#</a> 命令基础</h3><p>Linux 命令格式：</p><p><code>command [-options] [parameters]</code></p><ul><li>command: 命令本身</li><li>-options: 命令选项（可选）</li><li>parameter: 命令的参数（可选）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 以列表的形式显示 /home/test/ 目录的内容</span>
<span class="token function">ls</span> <span class="token parameter variable">-l</span> /home/test 
<span class="token comment"># 递归的复制文件夹 test1 为 test2 </span>
<span class="token function">cp</span> <span class="token parameter variable">-r</span> <span class="token builtin class-name">test</span> test2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ls-命令" tabindex="-1"><a class="header-anchor" href="#ls-命令" aria-hidden="true">#</a> ls 命令</h3><p>ls 以平铺的形式列出当前工作目录下的内容</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Linux 系统的命令行终端，在启动的时候，默认会加载：</p><ul><li>当前登录用户的 HOME 目录作为当前的工作目录，所以ls命令列出的是 HOME 目录的内容</li><li>HOME 目录：每个 Linux 操作用户在 Linux 系统的个人账号目录，路径在 :/home/用户名</li><li>可以通过 pwd 命令查看当前的工作目录</li></ul></div><p><strong>ls 的选项和参数</strong></p><p><code>ls [-a -l -h] [Linux路径]</code></p><ul><li><p><code>-a</code> 表示 all 的意思，列出全部文件（包括隐藏的文件/文件夹）</p><p>以 <code>.</code> 开头命名的文件表名是Linux系统的隐藏文件/文件夹，只要以<code>.</code>开头就能自动隐藏</p></li><li><p><code>-l</code> 以列表（竖向排列）的形式展示文件，并且展示详细信息</p></li><li><p><code>-h</code> 以易于阅读的形式，列出文件大小单位，如 K、M、G，该选项必须搭配 <code>-l</code> 一起使用</p></li></ul><p>命令选项是可以混合使用的，如 <code>ls -alh /</code></p><h3 id="cd-和-pwd-命令" tabindex="-1"><a class="header-anchor" href="#cd-和-pwd-命令" aria-hidden="true">#</a> cd 和 pwd 命令</h3><p><strong>cd 切换工作目录</strong></p><p>语法： <code>cd [Linux路径]</code></p><ul><li>cd 命令无需选项，只有参数，表示切换到哪个目录下</li><li>如果没有参数，则表面回到工作目录下</li></ul><p><strong>pwd 无选项，无参数，表名当前所在的工作目录</strong></p><h3 id="相对路径和绝对路径" tabindex="-1"><a class="header-anchor" href="#相对路径和绝对路径" aria-hidden="true">#</a> 相对路径和绝对路径</h3><ul><li><code>cd /home/root/test</code> 绝对路径写法</li><li><code>cd test</code> 相对路径写法</li></ul><p>绝对路径，以根目录为起点，描述路径的一种写法，路径描述以 / 开头 相对路径，以当前目录为起点</p><div class="hint-container tip"><p class="hint-container-title">特殊路径符号：</p><ul><li><code>.</code> 表示当前目录，如 <code>cd ./test</code></li><li><code>..</code> 表示上一级目录，如 <code>cd ../..</code> 切换到上两级目录</li><li><code>~</code> 表示 HOME 目录， 如 <code>cd ~</code></li></ul></div><h3 id="mkdir-命令创建新目录-文件夹" tabindex="-1"><a class="header-anchor" href="#mkdir-命令创建新目录-文件夹" aria-hidden="true">#</a> mkdir 命令创建新目录（文件夹）</h3><p>语法： <code>mkdir [-p] Linux路径</code></p><ul><li>参数必填，表示 Linux 路径，即需要创建的文件夹的路径，相对路径或绝对路径</li><li>选项选填，表示自动创建不存在的父目录，用于一次性创建多个层级的目录</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token builtin class-name">test</span>
<span class="token function">mkdir</span> ./test
<span class="token function">mkdir</span> ~/test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>ctrl + l</code> 用于清屏</p></div><p>注意：创建文件夹需要修改权限，确保操作均在 HOME 目录内，不要在 HOME 之外操作</p><h3 id="touch-cat-more-命令" tabindex="-1"><a class="header-anchor" href="#touch-cat-more-命令" aria-hidden="true">#</a> <code>touch cat more</code> 命令</h3><p><strong>touch 创建文件</strong></p><p>语法： <code>touch Linux路径</code></p><ul><li>touch 命令无选项，参数必填，表明文件名路径</li></ul><p><code>touch test.txt</code></p><p><strong>cat 命令查看文件内容</strong></p><p>语法： <code>cat Linux路径</code></p><ul><li>touch 命令无选项，参数必填，表明文件名路径</li></ul><p><code>cat test.txt</code></p><p><strong>more 命令查看文件内容</strong></p><p>语法和cat相同</p><p>与 cat 不同的是，cat是直接将内容全部显示出来，more支持翻页，可以一页一页的展示</p><p>空格进行翻页，按 q 退出</p><h3 id="cp-mv-rm-命令" tabindex="-1"><a class="header-anchor" href="#cp-mv-rm-命令" aria-hidden="true">#</a> <code>cp mv rm</code> 命令</h3><p><strong>cp 命令复制文件文件夹</strong> 语法： <code>cp [-r] 参数1 参数2</code></p><ul><li><code>-r</code> 选项，是否递归的复制</li><li>参数1，参数2 均为Linux路径，参数1表示被复制的文件文件夹路径，参数2表示复制到的地方</li></ul><p><strong>mv 移动文件文件夹</strong></p><p>语法： <code>mv 参数1 参数2</code></p><ul><li>参数1，参数2 均为Linux路径，参数1表示被移动的文件文件夹路径，参数2表示移动到的地方</li><li>如果目标不存在，则会自动进行改名，确保目标存在 <code>mv test2.txt test3.txt</code> 相当于重命名了</li></ul><p><strong>rm 删除文件文件夹</strong></p><p>语法： <code>cp [-r -f] 参数1 参数2 ...参数</code></p><ul><li><p><code>-r</code> 选项，是否递归的删除</p></li><li><p><code>-f</code> 表示 force, 强制删除（不会弹出提示确认信息）</p><ul><li>普通用户删除内容不会弹出提示，只有root管理员删除时会有提示，根据提示输入 y 或者 n 来继续下一步</li><li>所以一般用户用不到 -f 选项</li></ul></li><li><p>参数1，参数2，参数N 均为Linux路径，表示要删除的文件和文件夹路径，用空格隔开</p></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>rm 命令参数支持通配符 *，用于模糊匹配</p><ul><li>符号*表示通配符，即匹配任意内容(包含空)，示例： <code>test*</code> 匹配test开头的 <code>*test*</code> 匹配包含test的</li></ul></div><h3 id="which-find-命令" tabindex="-1"><a class="header-anchor" href="#which-find-命令" aria-hidden="true">#</a> <code>which find</code> 命令</h3><p><strong>which 查看所使用的一系列命令的程序文件存方法在哪里</strong></p><p>语法： <code>which 要查找的命令</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">which</span> <span class="token builtin class-name">cd</span>
<span class="token function">which</span> <span class="token builtin class-name">pwd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>find 搜索指定文件</strong></p><p>语法：</p><p><code>find 起始路径 -name &quot;被查找的文件名&quot;</code></p><p><code>find 起始路径 -size +|-n[KMG]</code></p><p>文件名同样支持 * 通配符进行模糊匹配</p><ul><li>选项 name ，根据文件名来查找</li><li>选项 size ，根据文件大小来查找，其中参数 <code>+-</code> 表示大于小于，n 表示大小数字，<code>KMG</code>为单位（KB,MB,GB）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> / <span class="token parameter variable">-name</span> <span class="token string">&quot;test*&quot;</span>

<span class="token function">find</span> / <span class="token parameter variable">-size</span> <span class="token parameter variable">-10k</span>

<span class="token function">find</span> / <span class="token parameter variable">-size</span> +1G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="grep-wc-管道符" tabindex="-1"><a class="header-anchor" href="#grep-wc-管道符" aria-hidden="true">#</a> <code>grep wc</code> 管道符</h3><h3 id="echo-tail-重定向" tabindex="-1"><a class="header-anchor" href="#echo-tail-重定向" aria-hidden="true">#</a> <code>echo tail</code> 重定向</h3><h3 id="vi-编辑器" tabindex="-1"><a class="header-anchor" href="#vi-编辑器" aria-hidden="true">#</a> vi 编辑器</h3><h2 id="linux-权限" tabindex="-1"><a class="header-anchor" href="#linux-权限" aria-hidden="true">#</a> Linux 权限</h2><h2 id="linux-服务" tabindex="-1"><a class="header-anchor" href="#linux-服务" aria-hidden="true">#</a> Linux 服务</h2><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>`,74),o=[t];function r(p,h){return i(),a("div",null,o)}const v=e(c,[["render",r],["__file","linux.html.vue"]]);export{v as default};
