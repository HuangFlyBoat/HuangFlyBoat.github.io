import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as i,c as o,a as n,b as c,d as r,e as a}from"./app-a19c7c3f.js";const p={},l=a(`<p>前端动画的简单入门</p><h1 id="前端动画-基础篇" tabindex="-1"><a class="header-anchor" href="#前端动画-基础篇" aria-hidden="true">#</a> 前端动画，基础篇</h1><h2 id="一、前端动画的实现方式" tabindex="-1"><a class="header-anchor" href="#一、前端动画的实现方式" aria-hidden="true">#</a> 一、前端动画的实现方式</h2><p>前端实现动画的方式有很多种，这里介绍四种常见的，前两者为 CSS 实现，后两者为 JS 控制实现</p><h3 id="_1-transition-过渡实现" tabindex="-1"><a class="header-anchor" href="#_1-transition-过渡实现" aria-hidden="true">#</a> 1. transition 过渡实现</h3><blockquote><p>CSS 过渡提供了一种在更改 CSS 属性时控制动画速度的方法。其可以让属性变化成为一个持续一段时间的，而不是立即生效的过程。比如，将一个元素的颜色从白色改为黑色，通常这个改变是立即生效的，使用 CSS 过渡后该元素的颜色将按照一定的曲线速率从白色变化为黑色。这个过程可以自定义。 transition CSS 属性是 transition-property、transition-duration、transition-timing-function 和 transition-delay 的一个简写属性 (en-US)。</p></blockquote><p>通过设置 CSS 过渡的值可以实现一些简单的基本动画，如缩放、放大、移动等</p><p><strong>使用示例如下，给特定的状态加上过渡，第一个值为过渡属性（可以设置为 all），第二个为过渡动画的执行时间，第三个参数可以为过渡行为（可以省略），最后为过渡延迟时间</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> &lt;property&gt; &lt;duration&gt; &lt;timing-function&gt; &lt;delay&gt;<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> margin-right 2s ease-in-out 0.5s<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> margin-right 2s 0.5s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当没有设置过渡的时间函数时，默认为平滑线性函数。通过设置自定义的时间函数可以实现一些生动的动画</p><p>如先进行反效果再进行正向的效果</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> font-size 0.7s <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>0.61<span class="token punctuation">,</span> -0.19<span class="token punctuation">,</span> 0.7<span class="token punctuation">,</span> -0.11<span class="token punctuation">)</span><span class="token punctuation">,</span> flex 0.7s
      <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>0.61<span class="token punctuation">,</span> -0.19<span class="token punctuation">,</span> 0.7<span class="token punctuation">,</span> -0.11<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),u={href:"https://cubic-bezier.com",target:"_blank",rel:"noopener noreferrer"},d=a('<h3 id="_2-animation-实现" tabindex="-1"><a class="header-anchor" href="#_2-animation-实现" aria-hidden="true">#</a> 2. animation 实现</h3><p>比 transition 更加强大，可以设置多个关键帧来实现</p><h3 id="_3-定时器实现" tabindex="-1"><a class="header-anchor" href="#_3-定时器实现" aria-hidden="true">#</a> 3. 定时器实现</h3><h3 id="_4-requestanimationframe-实现" tabindex="-1"><a class="header-anchor" href="#_4-requestanimationframe-实现" aria-hidden="true">#</a> 4. requestAnimationFrame 实现</h3><h2 id="二、前端动画参考网站" tabindex="-1"><a class="header-anchor" href="#二、前端动画参考网站" aria-hidden="true">#</a> 二、前端动画参考网站</h2>',5);function h(m,k){const s=e("ExternalLinkIcon");return i(),o("div",null,[l,n("p",null,[n("a",u,[c("贝塞尔曲线在线绘制"),r(s)])]),d])}const _=t(p,[["render",h],["__file","animation.html.vue"]]);export{_ as default};
