import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as o,a as n,b as s,d as l,e as a}from"./app-0d30a107.js";const i={},u=a(`<p>正则表达式，小白向~</p><h1 id="正则表达式-新手向" tabindex="-1"><a class="header-anchor" href="#正则表达式-新手向" aria-hidden="true">#</a> 正则表达式，新手向</h1><p>在面试的时候被问到正则表达式，发现经常会看见的正则表达式，自己却不曾深入了解，一些很基础的正则都写不来，于是想学习入门一下，搜寻了一些教程但感觉都不是特别小白,因此自己进行了整合，主要资料来源于 MDN</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>正则表达式重点在于匹配，为了匹配到对应元素而不停的设置限制</p></div><p>如何使用正则表达式？</p><p>最常见的情景就是表单验证，对表单里的字符进行选择性替换。第一个参数为正则表达式，第二个参数为替换成的字符 <code>string.replace(reg,value)</code></p><p><strong>注意正则表达式的字变量并不是由引号<code>&#39;</code>包裹，而是由<code>/</code>进行包裹</strong></p><p>在斜杠后面加上一些匹配结束的限制，默认为成功匹配到第一个就结束，可以加上 <code>g</code> 表示全文匹配 <code>/regExp/g</code>。类似的修饰符还有 i 忽略大小写 和 m 匹配多行</p><h2 id="一、断言匹配" tabindex="-1"><a class="header-anchor" href="#一、断言匹配" aria-hidden="true">#</a> 一、断言匹配</h2><p>断言匹配常用于确认字符串的匹配范围和边界</p><h2 id="_1-1-边界类型的断言" tabindex="-1"><a class="header-anchor" href="#_1-1-边界类型的断言" aria-hidden="true">#</a> 1.1 边界类型的断言</h2><h3 id="_1-匹配字符串的头前的空隙位置-用于插入字符在字符串头部" tabindex="-1"><a class="header-anchor" href="#_1-匹配字符串的头前的空隙位置-用于插入字符在字符串头部" aria-hidden="true">#</a> 1. ^ 匹配字符串的头前的空隙位置，用于插入字符在字符串头部</h3><h3 id="_2-匹配字符串的尾后的空隙位置-用于插入字符在字符串尾部" tabindex="-1"><a class="header-anchor" href="#_2-匹配字符串的尾后的空隙位置-用于插入字符在字符串尾部" aria-hidden="true">#</a> 2. $ 匹配字符串的尾后的空隙位置，用于插入字符在字符串尾部</h3><p>对于 ^ 和 $ 而言不仅可以单独使用，还可以加以限制条件，匹配以指定字符结尾的或者开头的元素(注意此时不再是进行插入，而是匹配成功后直接对元素进行替换操作)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;a 123 bP&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *a 123 bP</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a 123 bP*</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^a 12</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *3 bP</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">$x</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a 123 bP</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>^ 也有取反的意思哦，注意区分。比如 <code>^/d ^/w</code> 等，文章最后有举例</p></div><h4 id="_3-b-匹配一个词的边界" tabindex="-1"><a class="header-anchor" href="#_3-b-匹配一个词的边界" aria-hidden="true">#</a> 3. \\b 匹配一个词的边界</h4><p><strong>在使用之前需要明白一个问题，词的边界是什么？</strong></p><p>What is the boundary of a word? 以上英文总共出现了七个词，分别是 <code>What</code> <code>is</code> <code>the</code> <code>boundary</code> <code>of</code> <code>a</code> <code>word</code></p><p>为什么最后一个词是 <code>word</code> 而不是 <code>word?</code> 简单理解因为字符<code>?</code>不在规定的属于词的那 63 个字符内（所有英文的大小写和数字以及下划线），所以对应的词是<code>word</code>，相对于的它的边界是<code>w前的间隙</code>和<code>d后的间隙</code></p><p>注意是间隙而不是空格</p><p>通过上面的例子可以知道，\\b 就是去划分词，然后匹配各个词的左右边界位置，<strong>从而获得该词的位置</strong>，从而限制匹配的边界为单词。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">&#39;What is the boundary of a word?&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;**&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// **What** **is** **the** **boundary** **of** **a** **word**?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 修改后缀jpg的为png</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;aaa.jpg&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\bjpg</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>补充： js 正则表达式引擎规定的 \\b 匹配逻辑如下：</p><blockquote><p>The production Assertion :: \\ b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the following: Let e be x&#39;s endIndex. Call IsWordChar(e–1) and let a be the Boolean result. Call IsWordChar(e) and let b be the Boolean result. If a is true and b is false, return false. If a is false and b is true, return false. Return true</p></blockquote><p>63 个字符和运算逻辑</p><h4 id="_4-b-则和-b-相反-是对非词的边界进行匹配" tabindex="-1"><a class="header-anchor" href="#_4-b-则和-b-相反-是对非词的边界进行匹配" aria-hidden="true">#</a> 4. \\B 则和 \\b 相反，是对非词的边界进行匹配</h4><p>对于所有\\b 不会匹配的位置，都会被\\B 匹配到，有点取反的意思</p><p>还是那个例子 What is the boundary of a word?</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">&#39;What is the boundary of a word?&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// W*h*a*t i*s t*h*e b*o*u*n*d*a*r*y o*f a w*o*r*d?*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-2-其他类型的断言" tabindex="-1"><a class="header-anchor" href="#_1-2-其他类型的断言" aria-hidden="true">#</a> 1.2 其他类型的断言</h2><p>这类断言表达式中利用问号<code>?</code>来实现各种前后关联字符的断言。如要查找某个字符串 x，且 x 的后面的字符必须是满足给定条件的，又或者 x 的前面的字符必须满足条件</p><ol><li><p>x(?=y) 只会匹配 x，且满足 x 的后面紧跟着 y（有空格都不行）</p></li><li><p>x(?!y) 只会匹配 x，且满足 x 的后面没有紧跟着 y</p></li><li><p>(?&lt;=y)x 只会匹配 x，且满足 x 的前面紧跟着 y （注意写法和前两者的差距，限制 x 的前面时始终有<code>&lt;</code>）</p></li><li><p>(?&lt;!y)x 只会匹配 x，且满足 x 的前面没有紧跟着 y</p></li></ol><h2 id="二、-字符组合" tabindex="-1"><a class="header-anchor" href="#二、-字符组合" aria-hidden="true">#</a> 二、 字符组合</h2><p>这里将介绍除了断言匹配外，对于字符串里的内容经常会用到的简单匹配方式，包括了直接查找字符和查找字符的限制写法，包括值、范围、出现次数等</p><h2 id="_2-1-简单常用的字符查找" tabindex="-1"><a class="header-anchor" href="#_2-1-简单常用的字符查找" aria-hidden="true">#</a> 2.1 简单常用的字符查找</h2><h3 id="_1-a-b-字符直接匹配" tabindex="-1"><a class="header-anchor" href="#_1-a-b-字符直接匹配" aria-hidden="true">#</a> 1. a|b 字符直接匹配</h3><p>直接在正则表达式里面输入字符进行匹配，支持逻辑或，表示可选项</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将 ax 替换为了 *</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;aaaxjpg&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ax</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// aa*jpg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我想匹配空格呢? 当然可以，并且加上修饰符 g 后可以用于简单的消除多余空格</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39; a a a x   h g&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"> </span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// aaaxhg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是不能去除多余的换行符以及各种特殊的具有间隔功能的符号，不过没关系，有一个专门用来做这方面的特殊字符</p><h4 id="_2-s-匹配一个空白字符-包括空格、制表符、换页符和换行符" tabindex="-1"><a class="header-anchor" href="#_2-s-匹配一个空白字符-包括空格、制表符、换页符和换行符" aria-hidden="true">#</a> 2. \\s 匹配一个空白字符，包括空格、制表符、换页符和换行符</h4><p>清除字符串中的空格元素</p><p><code>str.replace(/\\s/g, &#39;&#39;)</code></p><h4 id="_3-a-z-按顺序匹配字母、数字-也可以用来匹配括号内的内容" tabindex="-1"><a class="header-anchor" href="#_3-a-z-按顺序匹配字母、数字-也可以用来匹配括号内的内容" aria-hidden="true">#</a> 3. [a-z] 按顺序匹配字母、数字,也可以用来匹配括号内的内容</h4><ul><li>[abc] 匹配字符 a,b,c</li><li>[-] 匹配<code>-</code></li><li>[a-z] 匹配字母 a 到字母 z 的字符</li><li>[a-c1-9] 括号里可以包含多个连字符,匹配 a-c 和 1-9</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;abcAG150&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-cA-C0]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ****G15*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是在 [] 中所写的限制都是针对单个字符的，也就是说 <code>/[ab]/</code> 和 <code>/ab/</code>的意思完全不一样，<code>/[ab]/</code> 和 <code>/a|b/</code> 的意思相同</p><p>但是如果我们想匹配所有数字或者字母，难道每次都要写 [a-zA-Z0-9]吗?当然不用，内部提供了对应的特殊字符表示</p><h4 id="_4-d-匹配任何数字-阿拉伯数字-。相当于-0-9" tabindex="-1"><a class="header-anchor" href="#_4-d-匹配任何数字-阿拉伯数字-。相当于-0-9" aria-hidden="true">#</a> 4. \\d 匹配任何数字 (阿拉伯数字)。相当于 [0-9]</h4><p>对应的大写 \\D 表示匹配任何非阿拉伯数字，相当于 [^0-9]。忘记说了符号 ^ 代表着取反</p><h4 id="_5-w-匹配-26-个字母-10-个数字和下划线-经常使用的大凶器-相当于-a-za-z0-9" tabindex="-1"><a class="header-anchor" href="#_5-w-匹配-26-个字母-10-个数字和下划线-经常使用的大凶器-相当于-a-za-z0-9" aria-hidden="true">#</a> 5. \\w 匹配 26 个字母，10 个数字和下划线（经常使用的大凶器，相当于[a-zA-Z0-9_]）</h4><p>对应的大写 \\W 则匹配\\w 能匹配之外的字符，比如一些特殊字符 !@#$%...乱七八糟的</p><h4 id="_6-当个的-表示与字符-进行匹配-当-与其他字符结合时则表示匹配任意字符-除-n-r-u2028-or-u2029-外。比-w-匹配的范围更广-如果需要在与其他字符连接时保持原有意思则加上转义符" tabindex="-1"><a class="header-anchor" href="#_6-当个的-表示与字符-进行匹配-当-与其他字符结合时则表示匹配任意字符-除-n-r-u2028-or-u2029-外。比-w-匹配的范围更广-如果需要在与其他字符连接时保持原有意思则加上转义符" aria-hidden="true">#</a> 6. <code>.</code> 当个的 <code>.</code>表示与字符 &#39;.&#39;进行匹配，当<code>.</code>与其他字符结合时则表示匹配任意字符，除\\n, \\r, \\u2028 or \\u2029 外。比\\w 匹配的范围更广,如果需要在与其他字符连接时保持原有意思则加上转义符\\</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 匹配 任意四个字符 加上 字符&gt; 结尾的元素</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;&lt;div&gt;123&lt;/div&gt;&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">....&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *123&lt;*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常 <code>.</code> 后面并不会指定字符，而是搭配着量词使用（见最后）</p><h2 id="_2-2-复杂的限制查找" tabindex="-1"><a class="header-anchor" href="#_2-2-复杂的限制查找" aria-hidden="true">#</a> 2.2 复杂的限制查找</h2><p>到了这里基本上一些简单的正则表达式也能看懂了，但如果需要完成复杂的匹配，如想要限制匹配的次数，则需要引入各类量词（注意没有减号哦）</p><p>需要知道的前提：量词使用的时候紧跟在前面的正则字符串 x 后面，作用于前面的 x 匹配几次</p><h3 id="_1-灵活的设置匹配次数" tabindex="-1"><a class="header-anchor" href="#_1-灵活的设置匹配次数" aria-hidden="true">#</a> 1. <code>{}</code> 灵活的设置匹配次数</h3><ul><li><p>x{n} 匹配符合前一项 x 的要求，且满足 n 次（n 为正整数）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;111111222333&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1{6}2{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *2333</span>

<span class="token comment">// 当然你也不用量词可以这样写，只是远不如量词简洁</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replcae</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">11111122</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *2333</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>x{n,} 匹配符合前一项 x 的要求，且至少满足 n 次（n 为正整数）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;1111111111111111222333&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1{4,}2{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *2333</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>x{n,m} 匹配符合前一项 x 的要求，且最少满足 n 次，最多满足 m 次（n，m 均为正整数且 n&lt;m）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;111222333&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1{1,4}2{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *2333</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>限制次数的正整数 n 和 m 都可以设置为 0，表示不用满足匹配条件，不过感觉并没有实际意义。因为这样写的时候可以省略掉</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;111222333&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1{0}2{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 111*2333</span>
<span class="token comment">// 等价于</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">2{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 111*2333</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-将前一项匹配-1-次或者更多次-等价于-1" tabindex="-1"><a class="header-anchor" href="#_2-将前一项匹配-1-次或者更多次-等价于-1" aria-hidden="true">#</a> 2. <code>+</code> 将前一项匹配 1 次或者更多次，等价于<code>{1,}</code></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;111222333&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1+2{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *2333</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-将前一项匹配-0-次或者更多次" tabindex="-1"><a class="header-anchor" href="#_3-将前一项匹配-0-次或者更多次" aria-hidden="true">#</a> 3. <code>*</code> 将前一项匹配 0 次或者更多次</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;222333&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1*2{2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *2333</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-将前一项匹配-0-次或者-1-次" tabindex="-1"><a class="header-anchor" href="#_4-将前一项匹配-0-次或者-1-次" aria-hidden="true">#</a> 4. <code>?</code>将前一项匹配 0 次或者 1 次</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&#39;angel&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">&#39;angle&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 只有 l 字符是明确要匹配的，l前后可能有e则也匹配</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">e?le?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ang</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">e?le?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ang</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="补充-关于贪婪和非贪婪" tabindex="-1"><a class="header-anchor" href="#补充-关于贪婪和非贪婪" aria-hidden="true">#</a> 补充：关于贪婪和非贪婪</h3><p>像 * 和 + 这样的量词被称作是贪婪的，没有设限最高匹配次数，只要能匹配则会一直匹配下去。我们可以在贪婪量词后面添加<code>?</code>使得其变为非贪婪，即匹配一次成功满足条件后就不再匹配，即使后面也有满足匹配条件的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;&lt;foo&gt; &lt;bar&gt; new &lt;/bar&gt; &lt;/foo&gt;&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;.*&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;.*?&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// * &lt;bar&gt; new &lt;/bar&gt; &lt;/foo&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 匹配console (注意如何不加问号，则会将整个字符串变为 *)</span>
<span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">console.log() asf let x = 5 console.error(;asf)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">console\\.\\w{3,5}\\(.*?\\)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// * asf let x = 5 *</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、正则常用函数" tabindex="-1"><a class="header-anchor" href="#三、正则常用函数" aria-hidden="true">#</a> 三、正则常用函数</h2><h3 id="_3-1-regexp-prototype-test-str" tabindex="-1"><a class="header-anchor" href="#_3-1-regexp-prototype-test-str" aria-hidden="true">#</a> 3.1 <code>RegExp.prototype.test(str)</code></h3><p>test() 方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回 true 或 false</p><p>注意全局匹配(有 g)和不是非全局匹配的 lastIndex 区别</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;table football&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;foo*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> globalRegex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;foo*&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalRegex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: 0</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalRegex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalRegex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: 9</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalRegex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Expected output: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在实际应用中，确定位数的情况下应该避免使用全局匹配(g)和粘性匹配(y)</p><p>因为一旦加上后，正则会记录上次匹配成功的索引 lastIndex（从 1 开始），下次匹配时会从 lastIndex 后开始匹配</p><p>而用户输入是一个动态过程，一直在变化值，如果从 lastIndex 开始匹配会导致匹配结果和实际想要的效果不一致</p></div><h3 id="_3-2-regexp-prototype-exec-str" tabindex="-1"><a class="header-anchor" href="#_3-2-regexp-prototype-exec-str" aria-hidden="true">#</a> 3.2 <code>RegExp.prototype.exec(str)</code></h3><p>exec() 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null</p><p>如果匹配失败，exec() 方法返回 null，并将正则表达式的 lastIndex 重置为 0</p><p>匹配成功，数组的第一个元素是整个匹配结果，接下来的元素是与括号捕获组中的模式匹配的子字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">tat</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;Neither tar nor tab. tat is tat&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
[
  &#39;tat&#39;,
  index: 21,
  input: &#39;Neither tar nor tab. tat is tat&#39;,
  groups: undefined
]
[
  &#39;tat&#39;,
  index: 28,
  input: &#39;Neither tar nor tab. tat is tat&#39;,
  groups: undefined
]
null
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w+)\\s(\\w+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
[
  &#39;Hello World&#39;,
  &#39;Hello&#39;,
  &#39;World&#39;,
  index: 0,
  input: &#39;Hello World&#39;,
  groups: undefined
]
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-string-prototype-match-regexp" tabindex="-1"><a class="header-anchor" href="#_3-1-string-prototype-match-regexp" aria-hidden="true">#</a> 3.1 <code>String.prototype.match(RegExp)</code></h3><p>match() 方法检索字符串与正则表达式进行匹配的结果，没有匹配的则返回 null</p><blockquote><p>只接受一个参数 <code>match(regexp)</code></p></blockquote><blockquote><p>返回值一个 Array，其内容取决于是否存在全局（g）标志，如果没有匹配，则返回 <strong>null</strong>。</p><ul><li><p>如果使用 g 标志，则将返回与完整正则表达式匹配的所有结果，但不会返回捕获组。</p></li><li><p>如果没有使用 g 标志，则只返回第一个完整匹配及其相关捕获组。在这种情况下，match() 方法将返回与 RegExp.prototype.exec() 相同的结果（一个带有一些额外属性的数组）。</p></li></ul></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> paragraph <span class="token operator">=</span> <span class="token string">&#39;The quick brown fox jumps over the lazy dog. It barked.&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> found <span class="token operator">=</span> paragraph<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [&quot;T&quot;, &quot;I&quot;]  正则表达式有 g 的情况下</span>
<span class="token comment">// [&quot;T&quot;]  正则表达式没有 g 的情况下</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-string-prototype-replace" tabindex="-1"><a class="header-anchor" href="#_3-3-string-prototype-replace" aria-hidden="true">#</a> 3.3 <code>String.prototype.replace()</code></h3><p>用得比较多的方法了，相较于其他几个方法，具有更多的参数选择。</p><blockquote><p>replace(pattern, replacement)</p><ul><li>pattern 可以是字符串或者一个带有 Symbol.replace 方法的对象，典型的例子就是正则表达式。任何没有 Symbol.replace 方法的值都会被强制转换为字符串。</li><li>replacement 可以是字符串或函数。如果是字符串，它将替换由 pattern 匹配的子字符串。函数下面重点介绍</li></ul></blockquote><div class="hint-container warning"><p class="hint-container-title">注意</p><p>值得注意的是，如果 pattern 是一个空字符串，则替换项将被插入到字符串的开头</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;_xxx&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串模式只会被替换一次。要执行全局搜索和替换，请使用带有 g 标志的正则表达式或使用 replaceAll()</p></div>`,96),r={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 例如 $ + 数字 表示匹配的子项，数字序号从1开始</span>
<span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w+)\\s(\\w+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Maria Cruz&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newstr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> <span class="token string">&#39;$2, $1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newstr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cruz, Maria</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>replacement 为函数的情况</strong></p><p>当替换值为函数时，函数会接收一些参数，提供有关匹配的信息，以便动态生成替换字符串。函数的参数如下：</p><ul><li>match：匹配到的字符串。</li><li>p1, p2, ..., pn：如果模式中有括号捕获组，这些参数会接收括号捕获组匹配的字符串。</li><li>offset：匹配到的字符串在原始字符串中的偏移量。</li><li>string：原始字符串。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">replacer</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// p1 是非数字，p2 是数字，且 p3 非字母数字</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; - &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// ^ 在这里是取反的意思，不是以什么开头的意思哦</span>
<span class="token keyword">const</span> newString <span class="token operator">=</span> <span class="token string">&#39;abc12345#$*%&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([^\\d]*)(\\d*)([^\\w]*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> replacer<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abc - 12345 - #$*%</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function k(g,v){const e=p("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("在第二个参数里面还可以传入特殊的字符，这里就不过多赘述，感兴趣可以查阅 "),n("a",r,[s("MDN"),l(e)])]),d])}const b=t(i,[["render",k],["__file","regular_expression.html.vue"]]);export{b as default};
