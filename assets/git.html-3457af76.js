import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,e as t}from"./app-44fb0395.js";const r={},d=t('<p>在新公司实习有一段时间了，在大公司里面体验到了git的实际应用，有所心得分享一下。 重点讲解仓库方面，分支创建和提交记录整理</p><h1 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> Git</h1><h2 id="一、基础用法" tabindex="-1"><a class="header-anchor" href="#一、基础用法" aria-hidden="true">#</a> 一、基础用法</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>开始之前先来解释下git的几个概念</p><ol><li><p>工作区（Working Directory）：工作区是你当前正在修改文件的地方。你可以在工作区添加、修改或删除文件。</p></li><li><p>暂存区（Staging Area）：暂存区是一个中间区域，用于存储即将提交到版本库的修改。当你完成对文件的修改后，你可以将这些修改添加到暂存区。</p></li><li><p>版本库（Repository）：版本库是Git的核心部分，它包含项目的完整历史记录。它由一系列的提交（commits）组成，每个提交代表了一次文件修改的快照。版本库存储在.git目录中。</p></li></ol></div><p><strong>一些常用的Git指令：</strong></p><ul><li><p>初始化仓库：</p><ul><li><code>git init</code>：在当前目录初始化一个新的Git仓库。</li><li><code>git clone &lt;url&gt;</code>: 克隆仓库</li><li><code>git clone -b &lt;branch_name&gt; &lt;url&gt;</code> 克隆远程仓库上的指定分支</li></ul></li><li><p>添加和提交文件：</p><ul><li><code>git add &lt;file&gt;</code>：将文件添加到暂存区。用 <code>git add ./</code> 来将所有修改的文件添加到暂存区里</li><li><code>git commit -m &quot;&lt;message&gt;&quot;</code>：提交暂存区的修改到版本库，并添加提交信息。</li></ul></li><li><p>分支管理：</p><ul><li><code>git branch</code>：列出所有分支。</li><li><code>git branch &lt;branch_name&gt;</code>：创建新的分支。</li><li><code>git checkout &lt;branch_name&gt;</code>：切换到指定分支。</li><li><code>git checkout -b &lt;branch_name&gt;</code>: 创建并切换到对应分支</li><li><code>git merge &lt;branch_name&gt;</code>：合并指定分支到当前分支。</li></ul></li><li><p>远程仓库：</p><ul><li><code>git remote add &lt;remote_name&gt; &lt;remote_url&gt;</code>：添加远程仓库。</li><li><code>git remote -v</code>：显示所有远程仓库。</li><li><code>git push &lt;remote_name&gt; &lt;branch_name&gt;</code>：将本地分支推送到远程仓库。</li><li><code>git pull &lt;remote_name&gt; &lt;branch_name&gt;</code>：从远程仓库拉取最新代码。</li></ul></li><li><p>查看状态和历史：</p><ul><li><code>git status</code>：显示工作区和暂存区的状态。</li><li><code>git log</code>：显示提交历史记录。</li><li><code>git diff</code>：显示工作区与暂存区的差异。</li><li><code>git show &lt;commit_id&gt;</code>：显示指定提交的详细信息和修改内容。</li></ul></li></ul><p>以上是一些基础的指令，也是工作中用得较多的。但是当出现复杂的场景时就不太够看了，往往是需要大费周章上网搜搜才能得到解决。</p><h2 id="二、git-进阶操作" tabindex="-1"><a class="header-anchor" href="#二、git-进阶操作" aria-hidden="true">#</a> 二、Git 进阶操作</h2><h3 id="_1、reset-和-rebase-历史更改" tabindex="-1"><a class="header-anchor" href="#_1、reset-和-rebase-历史更改" aria-hidden="true">#</a> 1、reset 和 rebase 历史更改</h3><p>git reset 和 git rebase 一直是一个很困惑作者的点，来到公司后利用空余时间好好恶补了一下。 为什么恶补？因为想要让自己的提交记录更加干净，不想因为 bug 或者漏提而反复提交好几次 🤧</p><blockquote><p><strong>先说结论，reset没有rebase灵活，简单的用reset，复杂的情况用rebase</strong> 在自己的提交还保留在本地并没有推送到远程仓库时， 更改自己的提交记录（注意是自己的且还没有推送的提交）是比较安全的</p></blockquote><div class="hint-container danger"><p class="hint-container-title">警告</p><p>变更历史是一件有风险的事情，请确保知道自己当前的目的和产生的副作用。在不确定时和团队成员做好沟通</p></div><h4 id="_1-1-git-reset" tabindex="-1"><a class="header-anchor" href="#_1-1-git-reset" aria-hidden="true">#</a> 1.1 git reset</h4><h4 id="_1-2-git-rebase" tabindex="-1"><a class="header-anchor" href="#_1-2-git-rebase" aria-hidden="true">#</a> 1.2 git rebase</h4><h3 id="_2、stash-储存" tabindex="-1"><a class="header-anchor" href="#_2、stash-储存" aria-hidden="true">#</a> 2、stash 储存</h3><h3 id="_3、merge-与-rebase-冲突解决" tabindex="-1"><a class="header-anchor" href="#_3、merge-与-rebase-冲突解决" aria-hidden="true">#</a> 3、merge 与 rebase 冲突解决</h3><h3 id="_4、cherry-pick-选择提交" tabindex="-1"><a class="header-anchor" href="#_4、cherry-pick-选择提交" aria-hidden="true">#</a> 4、cherry-pick 选择提交</h3><h2 id="三、项目管理" tabindex="-1"><a class="header-anchor" href="#三、项目管理" aria-hidden="true">#</a> 三、项目管理</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在项目中</p></div><h3 id="_1、提交合并注意项" tabindex="-1"><a class="header-anchor" href="#_1、提交合并注意项" aria-hidden="true">#</a> 1、提交合并注意项</h3><h3 id="_2、git-规约" tabindex="-1"><a class="header-anchor" href="#_2、git-规约" aria-hidden="true">#</a> 2、git 规约</h3><h2 id="四、实际场景" tabindex="-1"><a class="header-anchor" href="#四、实际场景" aria-hidden="true">#</a> 四、实际场景</h2><h3 id="_1、-提交后发现漏提了或者有bug" tabindex="-1"><a class="header-anchor" href="#_1、-提交后发现漏提了或者有bug" aria-hidden="true">#</a> 1、 提交后发现漏提了或者有bug</h3><h3 id="_2、-冲突处理解决" tabindex="-1"><a class="header-anchor" href="#_2、-冲突处理解决" aria-hidden="true">#</a> 2、 冲突处理解决</h3><h3 id="_3、-开发过程中需求转换到更紧急的需求上" tabindex="-1"><a class="header-anchor" href="#_3、-开发过程中需求转换到更紧急的需求上" aria-hidden="true">#</a> 3、 开发过程中需求转换到更紧急的需求上</h3>',25),l=[d];function c(h,o){return i(),a("div",null,l)}const g=e(r,[["render",c],["__file","git.html.vue"]]);export{g as default};
